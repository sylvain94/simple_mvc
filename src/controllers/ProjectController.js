/**
 * Controller Project - G√®re la logique m√©tier li√©e aux projets
 */

import { Project } from '../models/Project.js'

export class ProjectController {
  
  /**
   * R√©cup√®re les projets r√©cents pour le dashboard
   * @returns {Promise<Project[]>} - Liste des projets r√©cents
   */
  static async getRecentProjects() {
    try {
      console.log('üìã R√©cup√©ration des projets r√©cents')
      
      // Donn√©es d'exemple (√† remplacer par un vrai service API)
      const mockData = [
        {
          id: 1,
          name: 'Site E-commerce',
          description: 'Boutique en ligne moderne',
          status: 'En cours',
          progress: 75,
          team: 'Frontend',
          startDate: '2025-01-15'
        },
        {
          id: 2,
          name: 'API REST',
          description: 'Service backend scalable',
          status: 'Review',
          progress: 90,
          team: 'Backend',
          startDate: '2025-01-10'
        },
        {
          id: 3,
          name: 'App Mobile',
          description: 'Application iOS/Android',
          status: 'Planning',
          progress: 15,
          team: 'Mobile',
          startDate: '2025-02-01'
        }
      ]

      // Transformation en mod√®les Project
      const projects = mockData.map(data => Project.fromApiResponse(data))
      
      // Validation et filtrage
      const validProjects = projects.filter(project => {
        const validation = project.validate()
        if (!validation.isValid) {
          console.warn(`‚ö†Ô∏è Projet invalide ignor√©: ${project.name}`, validation.errors)
          return false
        }
        return true
      })

      // Tri par date de cr√©ation (plus r√©cent en premier)
      validProjects.sort((a, b) => b.createdAt - a.createdAt)

      console.log(`‚úÖ ${validProjects.length} projets r√©cents r√©cup√©r√©s`)
      return validProjects
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des projets r√©cents:', error)
      throw new Error(`Impossible de r√©cup√©rer les projets: ${error.message}`)
    }
  }

  /**
   * G√©n√®re des statistiques sur les projets
   * @returns {Promise<Object>} - Statistiques des projets
   */
  static async getProjectStats() {
    try {
      console.log('üìä G√©n√©ration des statistiques projets')
      
      // Donn√©es d'exemple
      const stats = {
        total: 25,
        inProgress: 8,
        completed: 12,
        planning: 3,
        review: 2,
        avgProgress: 67
      }

      console.log('‚úÖ Statistiques projets g√©n√©r√©es:', stats)
      return stats
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration des statistiques projets:', error)
      throw new Error(`Impossible de g√©n√©rer les statistiques: ${error.message}`)
    }
  }

  /**
   * Cr√©e un nouveau projet
   * @param {Object} projectData - Donn√©es du projet
   * @returns {Promise<Project>} - Projet cr√©√©
   */
  static async createProject(projectData) {
    try {
      console.log('‚ûï Cr√©ation d\'un nouveau projet')
      
      // Cr√©ation du mod√®le pour validation
      const project = new Project(projectData)
      
      // Validation
      const validation = project.validate()
      if (!validation.isValid) {
        throw new Error(`Donn√©es invalides: ${validation.errors.join(', ')}`)
      }

      // R√®gles m√©tier
      if (project.progress > 0 && project.status === Project.STATUS.PLANNING) {
        project.status = Project.STATUS.IN_PROGRESS
      }

      console.log(`‚úÖ Projet cr√©√©: ${project.name}`)
      return project
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du projet:', error)
      throw new Error(`Impossible de cr√©er le projet: ${error.message}`)
    }
  }
}

export default ProjectController
